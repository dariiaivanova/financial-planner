
Logging in:
	Preconditions: the need of user account
	Postconditions: In the case of successful logging in the user is entering the system. In another case, the condition of system doesn't change.
	Interacting sides: the entering system and user
	Description: This use case describes the user entering the system of financial planner
	The sequence of events:
		1. The system requires username and password.	
		2. The user enters username and password.
		3. The system checks out whether username and password are correct, after that the system is accessible. 
			In the case, username and password are incorrect, Exception #1.
	Exceptions
		Exception #1.
		Incorrect username/password. If username/password entered in the main stream is incorrect, the system informs that error occured.
		The user can return to the main stream, and in case he forgot the password See: Reset password, or register an account See: Register
		or refuse entering the system. The perfomance of use case ends.
Register:
	Preconditions: none.
	Postconditions: In the case of successful filling the required fields for user account (username, e-mail, password) user can log in the financial planner system.
		In another case, the condition of system doesn't change.
	Interacting sides: the entering system and user.
	Description: This use case describes the user registering in the system of financial planner.
	The sequence of events: 
		1. The system requires username, e-mail and password.
		2. The user enters username, e-mail and password.
		3. After the system checks out whether username and e-mail are unique and the length of password is enough, the system creates the user account using entered data.
			After that the user can log in the system. See: Logging in.
			In the case, username and e-mail aren't unique and the length of password isn't enough, Exception #1.
	Exceptions:
		Exception #1.
		Username/e-mail/password doesn't meet requirements of the system. In this case, the system informs that error occured. 
		The user can return to the main stream and change the values or refuse registering the system. The perfomance of use case ends.
Reset password:
	Preconditions: the need of user account.
	Postconditions: In the case of successful reseting the password, the user can log in. See: Logging in.
	Interacting sides: the entering system, e-mailing system and user.
	Description: This use case describes the user reseting forgotten password of his user account in financial planner system.
	The sequence of events:
		1. The system requires e-mail.
		2. The user enters e-mail.
		3. The system checks whether entered e-mail is registered. 
		If it's exists, the system sends a letter to entered e-mail with the new password generated by system. The perfomance of use case ends.
		After that, the user can log in the system. See: Logging in.
		In case e-mail isn't registered, Exception #1.
	Exceptions
		Exception #1.
		The e-mail isn't registered in the system. In this case, the system informs about occured error.
		The user can return to the main stream and change the e-mail, log in(See: Logging in), register an account (See: Register) or refuse resetting the password. 
		The perfomance of use case ends.

Add an income:
	Preconditions: the user logged in the system.
	Postconditions: An income has been successfully saved.
	Interacting sides: the financial planning system, user.
	Description: This use case describes the user adding a new income in his financials.
	The sequence of events:
		1. The system requires the name, the total and the date of an income.
		2. The user enters the name, the total and the date of an income.
		3. The system checks whether all values are entered, then adds and saves the income with entered data. The perfomance of use case ends.
		If the user didn't enter all the values, Exception #1.
	Exception.
	Exception #1.
		The user didn't enter all required values. In this case, the system informs about occured error. The user can return to the main stream and enter all values 
		or refuse adding an income. The perfomance of use case ends.

Add an expense:
	Preconditions: the user logged in the system.
	Postconditions: An expense type has been chosen.
	Interacting sides: the financial planning system, user.
	Description: This use case descibes the user choosing the type of a new expence in his financials.
	The sequence of events:
		1. The user chooses the type of an expense.
		If it's fixed, See: Add a fixed expense.
		If it's nonfixed, See: Add a nonfixed expense.
		2. The user can refuse to add an expense. The perfomance of use case ends.

Add a fixed expense:
	Preconditions: the user chose a fixed type of the expense.
	Postconditions: An expense has been successfully saved.
	Interacting sides: the financial planning system, user.
	Description: This use case descibes the user adding a new fixed expence in his financials.
	The sequence of events:
		1. The system requires the name, the total and the date of an expense.
		2. The user enteres the name, the total and the date of an expense.
		3. The system checks whether all values are entered, then adds and saves the expense with entered data. The perfomance of use case ends.
		If the user didn't enter all the values, Exception #1.
	Exception.
	Exception #1.
		The user didn't enter all required values. In this case, the system informs about occured error. The user can return to the main stream and enter all values 
		or refuse adding an expense. The perfomance of use case ends.

Add a daily expense:
	Preconditions: the user chose a daily type of the expense.
	Postconditions: An expense has been successfully saved.
	Interacting sides: the financial planning system, user.
	Description: This use case descibes the user adding a new daily expence in his financials.
	The sequence of events:
		1. The system requires the name, the total, the category and the date of an expense. 
		2. The user enteres the name, the total the category and the date of an expense. If there is no appropriate category, See: Add a category of a daily expense.
		3. The system checks whether all values are entered, then adds and saves the expense with entered data. The perfomance of use case ends.
		If the user didn't enter all the values, Exception #1.
	Exception.
	Exception #1.
		The user didn't enter all required values. In this case, the system informs about occured error. The user can return to the main stream and enter all values 
		or refuse adding an expense. The perfomance of use case ends.

Add a category of a daily expense:
	Preconditions: There is no appropriate category for a daily expense.
	Postconditions: A category has been successfully saved.
	Interacting sides: the financial planning system, user.
	Description: This use case descibes the user adding a new category for a daily expence in his financials.
	The sequence of events:
		1. The system requires the name of a category. 
		2. The user enteres the name of a category. 
		3. The system checks whether all values are entered, then adds and saves the category with entered data. The perfomance of use case ends.
		If the user didn't enter all the values, Exception #1.
	Exception.
	Exception #1.
		The user didn't enter all required values. In this case, the system informs about occured error. The user can return to the main stream and enter all values 
		or refuse adding an category. The perfomance of use case ends.

Add a saving:
	Preconditions: the user logged in the system.
	Postconditions: A saving has been successfully added.
	Interacting sides: the financial planning system, user.
	Description: This use case descibes the user adding the desireable total of cash to save.
	The sequence of events:
		1. The system requires the name and the total of a saving. 
		2. The user enteres the name  and the total of a saving. 
		3. The system checks whether all values are entered, then adds and saves the saving with entered data. The perfomance of use case ends.
		If the user didn't enter all the values, Exception #1.
	Exception.
	Exception #1.
		The user didn't enter all required values. In this case, the system informs about occured error. The user can return to the main stream and enter all values 
		or refuse adding a saving. The perfomance of use case ends.
Get the report of month expenses:
	Preconditions: the user logged in the system.
	Postconditions: The report of month expenses are got.
	Interacting sides: the financial planning system, user.
	Description: This use case descibes the user getting the report of month expenses.
	The sequence of events:
		1. The system requires to choose the month for getting the report.
		2. The user chooses the month for getting the report. If the user doesn't choose that, the condition of the system doesn't change.
		3. The system analyzes the expenses data during the whole month and returns the total expenses and the diagram of categorised expenses. The perfomance of use case ends.
		If there is no data, Exception #1.		
	Exception.
	Exception #1.
		There is no data to analyze for system. In this case, the system informs about occured error. The user can return to the main stream and enter all expenses 
		or refuse getting the report. The perfomance of use case ends.
